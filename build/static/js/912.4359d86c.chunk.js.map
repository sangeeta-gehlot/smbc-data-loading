{"version":3,"file":"static/js/912.4359d86c.chunk.js","mappings":"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","sources":["pages/auth/AuthWrapper.js","pages/auth/ResetPasswordAwsCognito.js"],"sourcesContent":["import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AuthWrapper = ({children}) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flex: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          maxWidth: 500,\r\n          minHeight: {xs: 320, sm: 450},\r\n          width: '100%',\r\n          overflow: 'hidden',\r\n          position: 'relative',\r\n          display: 'flex',\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            width: {xs: '100%', sm: '50%', lg: '100%'},\r\n            padding: {xs: 5, lg: 10},\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n          }}\r\n        >\r\n          {children}\r\n        </Box>\r\n        \r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AuthWrapper;\r\n\r\nAuthWrapper.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","import React, {useState} from 'react';\r\nimport {Form, Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport ReactCodeInput from 'react-code-input';\r\nimport {useDispatch} from 'react-redux';\r\nimport {fetchError} from 'redux/actions';\r\nimport {useIntl} from 'react-intl';\r\nimport {Fonts} from 'shared/constants/AppEnums';\r\nimport PropTypes from 'prop-types';\r\nimport AppTextField from '@crema/core/AppFormComponents/AppTextField';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport AppInfoView from '@crema/core/AppInfoView';\r\nimport AuthWrapper from './AuthWrapper';\r\nimport AppLogo from '@crema/core/AppLayout/components/AppLogo';\r\n\r\nconst validationSchema = yup.object({\r\n  newPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.enterNewPassword' />),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.reTypePassword' />),\r\n});\r\n\r\nconst ResetPasswordAwsCognito = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [pin, setPin] = useState('');\r\n\r\n  const {messages} = useIntl();\r\n\r\n  return (\r\n    <AuthWrapper>\r\n      <Box sx={{width: '100%'}}>\r\n        <Box\r\n          sx={{\r\n            mb: 5,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <AppLogo />\r\n        </Box>\r\n        <Typography\r\n          variant='h2'\r\n          component='h2'\r\n          sx={{\r\n            mb: 1.5,\r\n            color: (theme) => theme.palette.text.primary,\r\n            fontWeight: Fonts.SEMI_BOLD,\r\n            fontSize: {xs: 14, xl: 16},\r\n          }}\r\n        >\r\n          <IntlMessages id='common.resetPassword' />\r\n        </Typography>\r\n\r\n        <Formik\r\n          validateOnChange={true}\r\n          initialValues={{\r\n            oldPassword: '',\r\n            newPassword: '',\r\n            confirmPassword: '',\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={(data, {setErrors, resetForm, setSubmitting}) => {\r\n            if (pin.length !== 6) {\r\n              dispatch(fetchError(messages['validation.pinLength']));\r\n            } else if (data.newPassword !== data.confirmPassword) {\r\n              setErrors({\r\n                confirmPassword: (\r\n                  <IntlMessages id='validation.passwordMisMatch' />\r\n                ),\r\n              });\r\n            } else {\r\n              setSubmitting(true);\r\n              resetForm();\r\n              setSubmitting(false);\r\n            }\r\n          }}\r\n        >\r\n          {({isSubmitting}) => (\r\n            <Form noValidate autoComplete='off'>\r\n              <Box\r\n                sx={{\r\n                  mb: 6,\r\n                  fontSize: {xs: 16, sm: 18},\r\n                }}\r\n              >\r\n                <Typography>\r\n                  <IntlMessages id='common.verificationMessage' />\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                sx={{\r\n                  mb: {xs: 4, lg: 6},\r\n                }}\r\n              >\r\n                <ReactCodeInput\r\n                  type='password'\r\n                  value={pin}\r\n                  fields={6}\r\n                  onChange={(value) => setPin(value)}\r\n                />\r\n              </Box>\r\n\r\n              <Box\r\n                sx={{\r\n                  mb: {xs: 4, lg: 6},\r\n                }}\r\n              >\r\n                <AppTextField\r\n                  name='newPassword'\r\n                  label={<IntlMessages id='common.newPassword' />}\r\n                  sx={{\r\n                    width: '100%',\r\n                  }}\r\n                  variant='outlined'\r\n                  type='password'\r\n                />\r\n              </Box>\r\n\r\n              <Box\r\n                sx={{\r\n                  mb: {xs: 4, lg: 6},\r\n                }}\r\n              >\r\n                <AppTextField\r\n                  name='confirmPassword'\r\n                  label={<IntlMessages id='common.retypePassword' />}\r\n                  sx={{\r\n                    width: '100%',\r\n                  }}\r\n                  variant='outlined'\r\n                  type='password'\r\n                />\r\n              </Box>\r\n\r\n              <Button\r\n                variant='contained'\r\n                disabled={isSubmitting}\r\n                color='primary'\r\n                type='submit'\r\n                sx={{\r\n                  fontWeight: Fonts.REGULAR,\r\n                  textTransform: 'capitalize',\r\n                  fontSize: 16,\r\n                  minWidth: 160,\r\n                }}\r\n              >\r\n                <IntlMessages id='common.resetMyPassword' />\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        <AppInfoView />\r\n      </Box>\r\n    </AuthWrapper>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordAwsCognito;\r\n\r\nResetPasswordAwsCognito.propTypes = {\r\n  location: PropTypes.object,\r\n};\r\n"],"names":["_ref","children","_jsx","Box","sx","flex","display","flexDirection","justifyContent","alignItems","Card","maxWidth","minHeight","xs","sm","width","overflow","position","lg","padding","validationSchema","yup","newPassword","required","IntlMessages","id","confirmPassword","ResetPasswordAwsCognito","dispatch","useDispatch","pin","setPin","useState","messages","useIntl","AuthWrapper","_jsxs","mb","AppLogo","Typography","variant","component","color","theme","palette","text","primary","fontWeight","Fonts","SEMI_BOLD","fontSize","xl","Formik","validateOnChange","initialValues","oldPassword","onSubmit","data","setErrors","resetForm","setSubmitting","length","fetchError","_ref2","isSubmitting","Form","noValidate","autoComplete","ReactCodeInput","type","value","fields","onChange","AppTextField","name","label","Button","disabled","REGULAR","textTransform","minWidth","AppInfoView"],"sourceRoot":""}
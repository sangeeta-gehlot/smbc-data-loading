{"version":3,"file":"static/js/912.4c3e03e9.chunk.js","mappings":"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","sources":["pages/auth/AuthWrapper.js","pages/auth/ResetPasswordAwsCognito.js"],"sourcesContent":["import React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport Box from '@mui/material/Box';\r\nimport PropTypes from 'prop-types';\r\nimport {Typography} from '@mui/material';\r\nimport {Fonts} from 'shared/constants/AppEnums';\r\n\r\nconst AuthWrapper = ({children}) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flex: 1,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          maxWidth: 900,\r\n          minHeight: {xs: 320, sm: 450},\r\n          width: '100%',\r\n          overflow: 'hidden',\r\n          position: 'relative',\r\n          display: 'flex',\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            width: {xs: '100%', sm: '50%', lg: '40%'},\r\n            padding: {xs: 5, lg: 10},\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n          }}\r\n        >\r\n          {children}\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            width: {xs: '100%', sm: '50%', lg: '60%'},\r\n            position: 'relative',\r\n            padding: {xs: 5, lg: 10},\r\n            display: {xs: 'none', sm: 'flex'},\r\n            alignItems: {sm: 'center'},\r\n            justifyContent: {sm: 'center'},\r\n            flexDirection: {sm: 'column'},\r\n            backgroundColor: (theme) => theme.palette.grey[900],\r\n            color: (theme) => theme.palette.common.white,\r\n            fontSize: 14,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              maxWidth: 320,\r\n            }}\r\n          >\r\n            <Typography\r\n              component='h2'\r\n              sx={{\r\n                fontWeight: Fonts.BOLD,\r\n                fontSize: 30,\r\n                mb: 4,\r\n              }}\r\n            >\r\n              Welcome to Crema!\r\n            </Typography>\r\n            <Typography>\r\n              Crema is purely based on Material ui components and follows\r\n              Material ui guidelines.\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Card>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AuthWrapper;\r\n\r\nAuthWrapper.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","import React, {useState} from 'react';\r\nimport {Form, Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport ReactCodeInput from 'react-code-input';\r\nimport {useDispatch} from 'react-redux';\r\nimport {fetchError} from 'redux/actions';\r\nimport {useIntl} from 'react-intl';\r\nimport {Fonts} from 'shared/constants/AppEnums';\r\nimport PropTypes from 'prop-types';\r\nimport AppTextField from '@crema/core/AppFormComponents/AppTextField';\r\nimport IntlMessages from '@crema/utility/IntlMessages';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport AppInfoView from '@crema/core/AppInfoView';\r\nimport AuthWrapper from './AuthWrapper';\r\nimport AppLogo from '@crema/core/AppLayout/components/AppLogo';\r\n\r\nconst validationSchema = yup.object({\r\n  newPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.enterNewPassword' />),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(<IntlMessages id='validation.reTypePassword' />),\r\n});\r\n\r\nconst ResetPasswordAwsCognito = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [pin, setPin] = useState('');\r\n\r\n  const {messages} = useIntl();\r\n\r\n  return (\r\n    <AuthWrapper>\r\n      <Box sx={{width: '100%'}}>\r\n        <Box\r\n          sx={{\r\n            mb: 5,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <AppLogo />\r\n        </Box>\r\n        <Typography\r\n          variant='h2'\r\n          component='h2'\r\n          sx={{\r\n            mb: 1.5,\r\n            color: (theme) => theme.palette.text.primary,\r\n            fontWeight: Fonts.SEMI_BOLD,\r\n            fontSize: {xs: 14, xl: 16},\r\n          }}\r\n        >\r\n          <IntlMessages id='common.resetPassword' />\r\n        </Typography>\r\n\r\n        <Formik\r\n          validateOnChange={true}\r\n          initialValues={{\r\n            oldPassword: '',\r\n            newPassword: '',\r\n            confirmPassword: '',\r\n          }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={(data, {setErrors, resetForm, setSubmitting}) => {\r\n            if (pin.length !== 6) {\r\n              dispatch(fetchError(messages['validation.pinLength']));\r\n            } else if (data.newPassword !== data.confirmPassword) {\r\n              setErrors({\r\n                confirmPassword: (\r\n                  <IntlMessages id='validation.passwordMisMatch' />\r\n                ),\r\n              });\r\n            } else {\r\n              setSubmitting(true);\r\n              resetForm();\r\n              setSubmitting(false);\r\n            }\r\n          }}\r\n        >\r\n          {({isSubmitting}) => (\r\n            <Form noValidate autoComplete='off'>\r\n              <Box\r\n                sx={{\r\n                  mb: 6,\r\n                  fontSize: {xs: 16, sm: 18},\r\n                }}\r\n              >\r\n                <Typography>\r\n                  <IntlMessages id='common.verificationMessage' />\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                sx={{\r\n                  mb: {xs: 4, lg: 6},\r\n                }}\r\n              >\r\n                <ReactCodeInput\r\n                  type='password'\r\n                  value={pin}\r\n                  fields={6}\r\n                  onChange={(value) => setPin(value)}\r\n                />\r\n              </Box>\r\n\r\n              <Box\r\n                sx={{\r\n                  mb: {xs: 4, lg: 6},\r\n                }}\r\n              >\r\n                <AppTextField\r\n                  name='newPassword'\r\n                  label={<IntlMessages id='common.newPassword' />}\r\n                  sx={{\r\n                    width: '100%',\r\n                  }}\r\n                  variant='outlined'\r\n                  type='password'\r\n                />\r\n              </Box>\r\n\r\n              <Box\r\n                sx={{\r\n                  mb: {xs: 4, lg: 6},\r\n                }}\r\n              >\r\n                <AppTextField\r\n                  name='confirmPassword'\r\n                  label={<IntlMessages id='common.retypePassword' />}\r\n                  sx={{\r\n                    width: '100%',\r\n                  }}\r\n                  variant='outlined'\r\n                  type='password'\r\n                />\r\n              </Box>\r\n\r\n              <Button\r\n                variant='contained'\r\n                disabled={isSubmitting}\r\n                color='primary'\r\n                type='submit'\r\n                sx={{\r\n                  fontWeight: Fonts.REGULAR,\r\n                  textTransform: 'capitalize',\r\n                  fontSize: 16,\r\n                  minWidth: 160,\r\n                }}\r\n              >\r\n                <IntlMessages id='common.resetMyPassword' />\r\n              </Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n        <AppInfoView />\r\n      </Box>\r\n    </AuthWrapper>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordAwsCognito;\r\n\r\nResetPasswordAwsCognito.propTypes = {\r\n  location: PropTypes.object,\r\n};\r\n"],"names":["_ref","children","_jsx","Box","sx","flex","display","flexDirection","justifyContent","alignItems","_jsxs","Card","maxWidth","minHeight","xs","sm","width","overflow","position","lg","padding","backgroundColor","theme","palette","grey","color","common","white","fontSize","Typography","component","fontWeight","Fonts","BOLD","mb","validationSchema","yup","newPassword","required","IntlMessages","id","confirmPassword","ResetPasswordAwsCognito","dispatch","useDispatch","pin","setPin","useState","messages","useIntl","AuthWrapper","AppLogo","variant","text","primary","SEMI_BOLD","xl","Formik","validateOnChange","initialValues","oldPassword","onSubmit","data","setErrors","resetForm","setSubmitting","length","fetchError","_ref2","isSubmitting","Form","noValidate","autoComplete","ReactCodeInput","type","value","fields","onChange","AppTextField","name","label","Button","disabled","REGULAR","textTransform","minWidth","AppInfoView"],"sourceRoot":""}